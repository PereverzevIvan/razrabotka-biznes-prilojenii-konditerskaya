// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/tool_failure/service.proto

package tool_failure

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ToolFailureService_Create_FullMethodName        = "/tool_failure.ToolFailureService/Create"
	ToolFailureService_AddFixedAt_FullMethodName    = "/tool_failure.ToolFailureService/AddFixedAt"
	ToolFailureService_GetAll_FullMethodName        = "/tool_failure.ToolFailureService/GetAll"
	ToolFailureService_GetAllReasons_FullMethodName = "/tool_failure.ToolFailureService/GetAllReasons"
)

// ToolFailureServiceClient is the client API for ToolFailureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToolFailureServiceClient interface {
	Create(ctx context.Context, in *ToolFailureCreateRequest, opts ...grpc.CallOption) (*ToolFailureCreateResponse, error)
	AddFixedAt(ctx context.Context, in *ToolFailureAddFixedAtRequest, opts ...grpc.CallOption) (*ToolFailureAddFixedAtResponse, error)
	GetAll(ctx context.Context, in *ToolFailureGetAllRequest, opts ...grpc.CallOption) (*ToolFailureGetAllResponse, error)
	GetAllReasons(ctx context.Context, in *ToolFailureGetAllReasonsRequest, opts ...grpc.CallOption) (*ToolFailureGetAllReasonsResponse, error)
}

type toolFailureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewToolFailureServiceClient(cc grpc.ClientConnInterface) ToolFailureServiceClient {
	return &toolFailureServiceClient{cc}
}

func (c *toolFailureServiceClient) Create(ctx context.Context, in *ToolFailureCreateRequest, opts ...grpc.CallOption) (*ToolFailureCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToolFailureCreateResponse)
	err := c.cc.Invoke(ctx, ToolFailureService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolFailureServiceClient) AddFixedAt(ctx context.Context, in *ToolFailureAddFixedAtRequest, opts ...grpc.CallOption) (*ToolFailureAddFixedAtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToolFailureAddFixedAtResponse)
	err := c.cc.Invoke(ctx, ToolFailureService_AddFixedAt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolFailureServiceClient) GetAll(ctx context.Context, in *ToolFailureGetAllRequest, opts ...grpc.CallOption) (*ToolFailureGetAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToolFailureGetAllResponse)
	err := c.cc.Invoke(ctx, ToolFailureService_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolFailureServiceClient) GetAllReasons(ctx context.Context, in *ToolFailureGetAllReasonsRequest, opts ...grpc.CallOption) (*ToolFailureGetAllReasonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToolFailureGetAllReasonsResponse)
	err := c.cc.Invoke(ctx, ToolFailureService_GetAllReasons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToolFailureServiceServer is the server API for ToolFailureService service.
// All implementations must embed UnimplementedToolFailureServiceServer
// for forward compatibility.
type ToolFailureServiceServer interface {
	Create(context.Context, *ToolFailureCreateRequest) (*ToolFailureCreateResponse, error)
	AddFixedAt(context.Context, *ToolFailureAddFixedAtRequest) (*ToolFailureAddFixedAtResponse, error)
	GetAll(context.Context, *ToolFailureGetAllRequest) (*ToolFailureGetAllResponse, error)
	GetAllReasons(context.Context, *ToolFailureGetAllReasonsRequest) (*ToolFailureGetAllReasonsResponse, error)
	mustEmbedUnimplementedToolFailureServiceServer()
}

// UnimplementedToolFailureServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedToolFailureServiceServer struct{}

func (UnimplementedToolFailureServiceServer) Create(context.Context, *ToolFailureCreateRequest) (*ToolFailureCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedToolFailureServiceServer) AddFixedAt(context.Context, *ToolFailureAddFixedAtRequest) (*ToolFailureAddFixedAtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFixedAt not implemented")
}
func (UnimplementedToolFailureServiceServer) GetAll(context.Context, *ToolFailureGetAllRequest) (*ToolFailureGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedToolFailureServiceServer) GetAllReasons(context.Context, *ToolFailureGetAllReasonsRequest) (*ToolFailureGetAllReasonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllReasons not implemented")
}
func (UnimplementedToolFailureServiceServer) mustEmbedUnimplementedToolFailureServiceServer() {}
func (UnimplementedToolFailureServiceServer) testEmbeddedByValue()                            {}

// UnsafeToolFailureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToolFailureServiceServer will
// result in compilation errors.
type UnsafeToolFailureServiceServer interface {
	mustEmbedUnimplementedToolFailureServiceServer()
}

func RegisterToolFailureServiceServer(s grpc.ServiceRegistrar, srv ToolFailureServiceServer) {
	// If the following call pancis, it indicates UnimplementedToolFailureServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ToolFailureService_ServiceDesc, srv)
}

func _ToolFailureService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToolFailureCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolFailureServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToolFailureService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolFailureServiceServer).Create(ctx, req.(*ToolFailureCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolFailureService_AddFixedAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToolFailureAddFixedAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolFailureServiceServer).AddFixedAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToolFailureService_AddFixedAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolFailureServiceServer).AddFixedAt(ctx, req.(*ToolFailureAddFixedAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolFailureService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToolFailureGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolFailureServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToolFailureService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolFailureServiceServer).GetAll(ctx, req.(*ToolFailureGetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolFailureService_GetAllReasons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToolFailureGetAllReasonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolFailureServiceServer).GetAllReasons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToolFailureService_GetAllReasons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolFailureServiceServer).GetAllReasons(ctx, req.(*ToolFailureGetAllReasonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToolFailureService_ServiceDesc is the grpc.ServiceDesc for ToolFailureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToolFailureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tool_failure.ToolFailureService",
	HandlerType: (*ToolFailureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ToolFailureService_Create_Handler,
		},
		{
			MethodName: "AddFixedAt",
			Handler:    _ToolFailureService_AddFixedAt_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ToolFailureService_GetAll_Handler,
		},
		{
			MethodName: "GetAllReasons",
			Handler:    _ToolFailureService_GetAllReasons_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/tool_failure/service.proto",
}
