// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/tool_type/service.proto

package tool_type

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ToolTypeService_GetAll_FullMethodName  = "/tool_type.ToolTypeService/GetAll"
	ToolTypeService_GetByID_FullMethodName = "/tool_type.ToolTypeService/GetByID"
)

// ToolTypeServiceClient is the client API for ToolTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Example service for managing users
type ToolTypeServiceClient interface {
	GetAll(ctx context.Context, in *ToolTypeGetAllRequest, opts ...grpc.CallOption) (*ToolTypeGetAllResponse, error)
	GetByID(ctx context.Context, in *ToolTypeGetByIDRequest, opts ...grpc.CallOption) (*ToolTypeGetByIDResponse, error)
}

type toolTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewToolTypeServiceClient(cc grpc.ClientConnInterface) ToolTypeServiceClient {
	return &toolTypeServiceClient{cc}
}

func (c *toolTypeServiceClient) GetAll(ctx context.Context, in *ToolTypeGetAllRequest, opts ...grpc.CallOption) (*ToolTypeGetAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToolTypeGetAllResponse)
	err := c.cc.Invoke(ctx, ToolTypeService_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolTypeServiceClient) GetByID(ctx context.Context, in *ToolTypeGetByIDRequest, opts ...grpc.CallOption) (*ToolTypeGetByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToolTypeGetByIDResponse)
	err := c.cc.Invoke(ctx, ToolTypeService_GetByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToolTypeServiceServer is the server API for ToolTypeService service.
// All implementations must embed UnimplementedToolTypeServiceServer
// for forward compatibility.
//
// Example service for managing users
type ToolTypeServiceServer interface {
	GetAll(context.Context, *ToolTypeGetAllRequest) (*ToolTypeGetAllResponse, error)
	GetByID(context.Context, *ToolTypeGetByIDRequest) (*ToolTypeGetByIDResponse, error)
	mustEmbedUnimplementedToolTypeServiceServer()
}

// UnimplementedToolTypeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedToolTypeServiceServer struct{}

func (UnimplementedToolTypeServiceServer) GetAll(context.Context, *ToolTypeGetAllRequest) (*ToolTypeGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedToolTypeServiceServer) GetByID(context.Context, *ToolTypeGetByIDRequest) (*ToolTypeGetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedToolTypeServiceServer) mustEmbedUnimplementedToolTypeServiceServer() {}
func (UnimplementedToolTypeServiceServer) testEmbeddedByValue()                         {}

// UnsafeToolTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToolTypeServiceServer will
// result in compilation errors.
type UnsafeToolTypeServiceServer interface {
	mustEmbedUnimplementedToolTypeServiceServer()
}

func RegisterToolTypeServiceServer(s grpc.ServiceRegistrar, srv ToolTypeServiceServer) {
	// If the following call pancis, it indicates UnimplementedToolTypeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ToolTypeService_ServiceDesc, srv)
}

func _ToolTypeService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToolTypeGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolTypeServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToolTypeService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolTypeServiceServer).GetAll(ctx, req.(*ToolTypeGetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolTypeService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToolTypeGetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolTypeServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToolTypeService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolTypeServiceServer).GetByID(ctx, req.(*ToolTypeGetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToolTypeService_ServiceDesc is the grpc.ServiceDesc for ToolTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToolTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tool_type.ToolTypeService",
	HandlerType: (*ToolTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _ToolTypeService_GetAll_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _ToolTypeService_GetByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/tool_type/service.proto",
}
