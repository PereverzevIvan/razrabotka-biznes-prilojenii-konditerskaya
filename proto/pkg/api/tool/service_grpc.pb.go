// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/tool/service.proto

package tool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ToolService_GetAll_FullMethodName  = "/tool.ToolService/GetAll"
	ToolService_GetByID_FullMethodName = "/tool.ToolService/GetByID"
	ToolService_Add_FullMethodName     = "/tool.ToolService/Add"
	ToolService_Edit_FullMethodName    = "/tool.ToolService/Edit"
	ToolService_Delete_FullMethodName  = "/tool.ToolService/Delete"
)

// ToolServiceClient is the client API for ToolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToolServiceClient interface {
	GetAll(ctx context.Context, in *ToolGetAllRequest, opts ...grpc.CallOption) (*ToolGetAllResponse, error)
	GetByID(ctx context.Context, in *ToolGetByIDRequest, opts ...grpc.CallOption) (*ToolGetByIDResponse, error)
	Add(ctx context.Context, in *ToolAddRequest, opts ...grpc.CallOption) (*ToolAddResponse, error)
	Edit(ctx context.Context, in *ToolEditRequest, opts ...grpc.CallOption) (*ToolEditResponse, error)
	Delete(ctx context.Context, in *ToolDeleteRequest, opts ...grpc.CallOption) (*ToolDeleteResponse, error)
}

type toolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewToolServiceClient(cc grpc.ClientConnInterface) ToolServiceClient {
	return &toolServiceClient{cc}
}

func (c *toolServiceClient) GetAll(ctx context.Context, in *ToolGetAllRequest, opts ...grpc.CallOption) (*ToolGetAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToolGetAllResponse)
	err := c.cc.Invoke(ctx, ToolService_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolServiceClient) GetByID(ctx context.Context, in *ToolGetByIDRequest, opts ...grpc.CallOption) (*ToolGetByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToolGetByIDResponse)
	err := c.cc.Invoke(ctx, ToolService_GetByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolServiceClient) Add(ctx context.Context, in *ToolAddRequest, opts ...grpc.CallOption) (*ToolAddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToolAddResponse)
	err := c.cc.Invoke(ctx, ToolService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolServiceClient) Edit(ctx context.Context, in *ToolEditRequest, opts ...grpc.CallOption) (*ToolEditResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToolEditResponse)
	err := c.cc.Invoke(ctx, ToolService_Edit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolServiceClient) Delete(ctx context.Context, in *ToolDeleteRequest, opts ...grpc.CallOption) (*ToolDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToolDeleteResponse)
	err := c.cc.Invoke(ctx, ToolService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToolServiceServer is the server API for ToolService service.
// All implementations must embed UnimplementedToolServiceServer
// for forward compatibility.
type ToolServiceServer interface {
	GetAll(context.Context, *ToolGetAllRequest) (*ToolGetAllResponse, error)
	GetByID(context.Context, *ToolGetByIDRequest) (*ToolGetByIDResponse, error)
	Add(context.Context, *ToolAddRequest) (*ToolAddResponse, error)
	Edit(context.Context, *ToolEditRequest) (*ToolEditResponse, error)
	Delete(context.Context, *ToolDeleteRequest) (*ToolDeleteResponse, error)
	mustEmbedUnimplementedToolServiceServer()
}

// UnimplementedToolServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedToolServiceServer struct{}

func (UnimplementedToolServiceServer) GetAll(context.Context, *ToolGetAllRequest) (*ToolGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedToolServiceServer) GetByID(context.Context, *ToolGetByIDRequest) (*ToolGetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedToolServiceServer) Add(context.Context, *ToolAddRequest) (*ToolAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedToolServiceServer) Edit(context.Context, *ToolEditRequest) (*ToolEditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (UnimplementedToolServiceServer) Delete(context.Context, *ToolDeleteRequest) (*ToolDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedToolServiceServer) mustEmbedUnimplementedToolServiceServer() {}
func (UnimplementedToolServiceServer) testEmbeddedByValue()                     {}

// UnsafeToolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToolServiceServer will
// result in compilation errors.
type UnsafeToolServiceServer interface {
	mustEmbedUnimplementedToolServiceServer()
}

func RegisterToolServiceServer(s grpc.ServiceRegistrar, srv ToolServiceServer) {
	// If the following call pancis, it indicates UnimplementedToolServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ToolService_ServiceDesc, srv)
}

func _ToolService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToolGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToolService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServiceServer).GetAll(ctx, req.(*ToolGetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToolGetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToolService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServiceServer).GetByID(ctx, req.(*ToolGetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToolAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToolService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServiceServer).Add(ctx, req.(*ToolAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolService_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToolEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServiceServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToolService_Edit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServiceServer).Edit(ctx, req.(*ToolEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToolDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToolService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServiceServer).Delete(ctx, req.(*ToolDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToolService_ServiceDesc is the grpc.ServiceDesc for ToolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tool.ToolService",
	HandlerType: (*ToolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _ToolService_GetAll_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _ToolService_GetByID_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _ToolService_Add_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _ToolService_Edit_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ToolService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/tool/service.proto",
}
